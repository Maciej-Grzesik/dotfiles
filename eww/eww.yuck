(include "./modules/workspaces.yuck")
(include "./modules/music.yuck")
(include "./modules/system.yuck")
(include "./modules/power.yuck")

(defvar open_calendar false)
(defvar ANIM_ENTER `["transition: 250ms cubic-bezier(0.05,0.7,0.1,1);","transition: 250ms cubic-bezier(0,0,0,1);"]`)
(defvar ANIM_EXIT `["transition: 180ms cubic-bezier(0.3,0,0.8,0.15);","transition: 180ms cubic-bezier(1,0,1,1);"]`)
(defvar anim_set 0)


(defwidget calendar_widget []
  (box
    :orientation "v"
    :space-evenly false
    (box
      :class "calendar-header"
      :height 50
      (label
        :class "calendar-title"
        :text "Calendar"
      )
    )
    (box
      :class "calendar-content"
      :orientation "v"
      :style "min-height: 350px; background-color: red;"
      (calendar)
    )
  )
)

(defwindow calendar_win [monitor]
  :monitor monitor
  :geometry (geometry
    :x "50%"
    :y "50px"
    :anchor "top center"
    :width "300px"
    :height "400px"
  )
  :stacking "overlay"
  :namespace "eww"
  
  (eventbox
    :onhoverlost "eww update open_calendar=false && eww close calendar_win"
    :onclick "eww close calendar_win"
    (box
      :style "background-color: white; border: 2px solid black;"
      (calendar_widget)
    )
  )
)

(defwidget bar [monitor]
  (centerbox :orientation "h"
    (box :class "left" :halign "start" :space-evenly false
      (music_widget)
    )
    (box :class "center" :halign "center"
      (workspaces_widget)
    )
    (box :class "right" :halign "end" :space-evenly false
      (system_widget)
      (eventbox
        :onclick "eww open calendar_win --arg monitor=${monitor}"
        (label
          :class "bar-icon-material bar-system-icon bar-txt-norm"
          :text "ó°ƒ°"
        )
      )
    )
  )
)




(defpoll volume :interval "1s" "scripts/getvol")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
    :y "5px"
    :width "98%"
    :height "45px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "0px")
  :exclusive true
  (bar :monitor 0))

(defwindow bar1
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
    :y "5px"
    :width "98%"
    :height "45px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "0px")
  :exclusive true
  (bar :monitor 1))